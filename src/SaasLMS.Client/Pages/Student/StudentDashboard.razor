@page "/student/dashboard"
@attribute [Authorize(Roles = "Student")]
@inject IStudentService StudentService

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
            <h1 class="text-2xl font-semibold text-gray-900">My Learning Dashboard</h1>

            <!-- Progress Overview -->
            <div class="mt-8 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
                <QuickStatsCard 
                    Title="Courses In Progress" 
                    Value="@_dashboardData?.ActiveCourses.ToString()" 
                    Icon="book-open" />

                <QuickStatsCard 
                    Title="Completed Courses" 
                    Value="@_dashboardData?.CompletedCourses.ToString()" 
                    Icon="check-circle" />

                <QuickStatsCard 
                    Title="Certificates Earned" 
                    Value="@_dashboardData?.CertificatesEarned.ToString()" 
                    Icon="award" />

                <QuickStatsCard 
                    Title="Average Score" 
                    Value="@($"{_dashboardData?.AverageScore:F1}%")" 
                    Icon="trending-up" />
            </div>

            <!-- Active Courses -->
            <div class="mt-8">
                <div class="bg-white shadow overflow-hidden sm:rounded-md">
                    <div class="px-4 py-5 border-b border-gray-200 sm:px-6">
                        <h2 class="text-lg font-medium text-gray-900">Active Courses</h2>
                    </div>
                    <ul class="divide-y divide-gray-200">
                        @if (_activeCourses != null)
                        {
                            @foreach (var course in _activeCourses)
                            {
                                <li>
                                    <a href="/student/courses/@course.Id" class="block hover:bg-gray-50">
                                        <div class="px-4 py-4 sm:px-6">
                                            <div class="flex items-center justify-between">
                                                <div class="flex items-center">
                                                    @if (!string.IsNullOrEmpty(course.ThumbnailUrl))
                                                    {
                                                        <img class="h-12 w-12 rounded-lg object-cover" 
                                                             src="@course.ThumbnailUrl" 
                                                             alt="@course.Title" />
                                                    }
                                                    else
                                                    {
                                                        <div class="h-12 w-12 rounded-lg bg-indigo-100 flex items-center justify-center">
                                                            <BookOpen class="h-6 w-6 text-indigo-600" />
                                                        </div>
                                                    }
                                                    <div class="ml-4">
                                                        <h3 class="text-sm font-medium text-gray-900">@course.Title</h3>
                                                        <div class="mt-1 flex items-center">
                                                            <div class="text-xs text-gray-500">
                                                                @course.Category â€¢ @course.Level
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="ml-6">
                                                    <div class="flex items-center">
                                                        <div class="w-48 bg-gray-200 rounded-full h-2">
                                                            <div class="bg-indigo-600 h-2 rounded-full" 
                                                                 style="width: @($"{course.Progress}%")"></div>
                                                        </div>
                                                        <span class="ml-2 text-sm text-gray-500">
                                                            @($"{course.Progress}%")
                                                        </span>
                                                    </div>
                                                    <p class="mt-1 text-xs text-gray-500">
                                                        Last accessed @(new TimeAgo().Format(course.LastAccessedAt))
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </a>
                                </li>
                            }
                        }
                        else
                        {
                            <li class="px-4 py-4 sm:px-6 text-center text-gray-500">
                                Loading courses...
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <!-- Recent Activities and Next Up -->
            <div class="mt-8 grid grid-cols-1 gap-8 lg:grid-cols-2">
                <RecentActivities Activities="@_dashboardData?.RecentActivities" />
                <NextUpWidget 
                    NextLessons="@_dashboardData?.NextLessons"
                    DueAssignments="@_dashboardData?.DueAssignments" />
            </div>

            <!-- Achievements and Certificates -->
            <div class="mt-8">
                <AchievementsWidget 
                    Achievements="@_dashboardData?.Achievements"
                    Certificates="@_dashboardData?.Certificates" />
            </div>
        </div>
    </div>
</div>

@code {
    private StudentDashboardDTO? _dashboardData;
    private List<StudentCourseDTO>? _activeCourses;
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardDataAsync();
        await SetupRealtimeUpdates();
    }

    private async Task LoadDashboardDataAsync()
    {
        try
        {
            var response = await StudentService.GetDashboardDataAsync();
            if (response.Success)
            {
                _dashboardData = response.Data;
                _activeCourses = response.Data.ActiveCourses;
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine(ex);
        }
    }

    private async Task SetupRealtimeUpdates()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/studentHub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<StudentDashboardUpdateDTO>("ReceiveUpdate", update =>
        {
            if (_dashboardData != null)
            {
                // Update dashboard data
                _dashboardData.ActiveCourses = update.ActiveCourses;
                _dashboardData.CompletedCourses = update.CompletedCourses;
                _dashboardData.CertificatesEarned = update.CertificatesEarned;
                _dashboardData.AverageScore = update.AverageScore;
                StateHasChanged();
            }
        });

        await _hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}