@page "/instructor/dashboard"
@attribute [Authorize(Roles = "Instructor")]
@inject IInstructorService InstructorService

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
            <div class="flex justify-between items-center">
                <h1 class="text-2xl font-semibold text-gray-900">Instructor Dashboard</h1>
                <div class="flex items-center space-x-4">
                    <TimeframeSelector @bind-Value="_selectedTimeframe" />
                    <button @onclick="CreateCourse"
                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <Plus class="-ml-1 mr-2 h-5 w-5" />
                        Create Course
                    </button>
                </div>
            </div>

            <!-- Quick stats -->
            <div class="mt-8 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
                <QuickStatsCard 
                    Title="Active Students" 
                    Value="@_dashboardData?.TotalStudents.ToString("N0")" 
                    Change="@GetChangePercentage(_dashboardData?.PreviousPeriod.TotalStudents, _dashboardData?.TotalStudents)"
                    Icon="users" />

                <QuickStatsCard 
                    Title="Course Enrollments" 
                    Value="@_dashboardData?.TotalEnrollments.ToString("N0")" 
                    Change="@GetChangePercentage(_dashboardData?.PreviousPeriod.TotalEnrollments, _dashboardData?.TotalEnrollments)"
                    Icon="book" />

                <QuickStatsCard 
                    Title="Total Revenue" 
                    Value="@($"${_dashboardData?.TotalRevenue:N2}")" 
                    Change="@GetChangePercentage(_dashboardData?.PreviousPeriod.TotalRevenue, _dashboardData?.TotalRevenue)"
                    Icon="dollar-sign" />

                <QuickStatsCard 
                    Title="Average Rating" 
                    Value="@($"{_dashboardData?.AverageRating:N1}/5.0")" 
                    Change="@GetChangePercentage(_dashboardData?.PreviousPeriod.AverageRating, _dashboardData?.AverageRating)"
                    Icon="star" />
            </div>

            <!-- Charts grid -->
            <div class="mt-8 grid grid-cols-1 gap-8 lg:grid-cols-2">
                <!-- Revenue chart -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-6">
                        <h3 class="text-lg font-medium text-gray-900">Revenue Trend</h3>
                        <div class="mt-4">
                            <InstructorRevenueChart Data="@_dashboardData?.RevenueTrend" />
                        </div>
                    </div>
                </div>

                <!-- Enrollment trend -->
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-6">
                        <h3 class="text-lg font-medium text-gray-900">Enrollment Trend</h3>
                        <div class="mt-4">
                            <InstructorEnrollmentChart Data="@_dashboardData?.EnrollmentTrend" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Course performance table -->
            <div class="mt-8">
                <CoursePerformanceTable Courses="@_dashboardData?.CoursePerformance" />
            </div>

            <!-- Recent activities and student feedback -->
            <div class="mt-8 grid grid-cols-1 gap-8 lg:grid-cols-2">
                <RecentActivities Activities="@_dashboardData?.RecentActivities" />
                <StudentFeedback Feedback="@_dashboardData?.StudentFeedback" />
            </div>

            <!-- Assignment grading queue -->
            <div class="mt-8">
                <AssignmentQueue Assignments="@_dashboardData?.PendingAssignments" />
            </div>
        </div>
    </div>
</div>

@code {
    private string _selectedTimeframe = "week";
    private InstructorDashboardDTO? _dashboardData;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardDataAsync();
        await SetupRealtimeUpdates();
    }

    private async Task LoadDashboardDataAsync()
    {
        try
        {
            _dashboardData = await InstructorService.GetDashboardDataAsync(_selectedTimeframe);
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine(ex);
        }
    }

    private async Task SetupRealtimeUpdates()
    {
        var hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/instructorHub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<DashboardUpdateDTO>("ReceiveUpdate", update =>
        {
            // Update dashboard data
            if (_dashboardData != null)
            {
                _dashboardData.TotalStudents = update.TotalStudents;
                _dashboardData.TotalEnrollments = update.TotalEnrollments;
                _dashboardData.TotalRevenue = update.TotalRevenue;
                _dashboardData.AverageRating = update.AverageRating;
                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();
    }

    private void CreateCourse()
    {
        Navigation.NavigateTo("/instructor/courses/create");
    }

    private string? GetChangePercentage(double? previous, double? current)
    {
        if (!previous.HasValue || !current.HasValue || previous == 0) return null;
        var change = (current.Value - previous.Value) / previous.Value * 100;
        return change >= 0 ? $"+{change:N1}%" : $"{change:N1}%";
    }
}