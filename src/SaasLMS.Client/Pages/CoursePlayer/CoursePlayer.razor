@page "/courses/{CourseId:guid}/learn"
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="flex h-screen overflow-hidden">
    <!-- Sidebar -->
    <div class="w-64 bg-white border-r border-gray-200 flex flex-col">
        <div class="h-16 flex items-center justify-between px-4 border-b border-gray-200">
            <h2 class="text-lg font-medium text-gray-900 truncate">
                @_course?.Title
            </h2>
            <button @onclick="ToggleSidebar" class="lg:hidden">
                <svg class="h-6 w-6 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <div class="flex-1 overflow-y-auto">
            @if (_course?.Modules != null)
            {
                @foreach (var module in _course.Modules.OrderBy(m => m.OrderIndex))
                {
                    <div class="border-b border-gray-200">
                        <div class="bg-gray-50 px-4 py-3">
                            <h3 class="text-sm font-medium text-gray-900">@module.Title</h3>
                        </div>
                        <div class="divide-y divide-gray-200">
                            @foreach (var content in module.Contents.OrderBy(c => c.OrderIndex))
                            {
                                <button @onclick="() => SelectContent(content)" 
                                        class="w-full text-left px-4 py-3 flex items-center space-x-3 hover:bg-gray-50 @(content.Id == _selectedContent?.Id ? "bg-indigo-50" : "")">
                                    <ContentTypeIcon Type="@content.Type" />
                                    <span class="text-sm text-gray-900 truncate">@content.Title</span>
                                    @if (_progress.ContainsKey(content.Id) && _progress[content.Id] >= 100)
                                    {
                                        <svg class="h-5 w-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                        </svg>
                                    }
                                </button>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- Main content area -->
    <div class="flex-1 flex flex-col overflow-hidden">
        <div class="h-16 bg-white border-b border-gray-200 flex items-center px-4">
            <button @onclick="ToggleSidebar" class="lg:hidden mr-4">
                <svg class="h-6 w-6 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
            <h1 class="text-lg font-medium text-gray-900">@_selectedContent?.Title</h1>
        </div>

        <div class="flex-1 overflow-y-auto p-4">
            @if (_selectedContent != null)
            {
                <ContentPlayer Content="@_selectedContent" 
                              OnProgressUpdate="HandleProgressUpdate" />
            }
            else
            {
                <div class="flex items-center justify-center h-full text-gray-500">
                    Select a content item to begin
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid CourseId { get; set; }

    private CourseDTO? _course;
    private ContentDTO? _selectedContent;
    private Dictionary<Guid, float> _progress = new();
    private bool _sidebarOpen = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourse();
        await LoadProgress();
    }

    private async Task LoadCourse()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ResponseDTO<CourseDTO>>($"api/courses/{CourseId}");
            if (response?.Success == true)
            {
                _course = response.Data;
                _selectedContent = _course?.Modules
                    .SelectMany(m => m.Contents)
                    .FirstOrDefault();
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine(ex);
        }
    }

    private async Task LoadProgress()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ResponseDTO<List<ProgressRecordDTO>>>($"api/courses/{CourseId}/progress");
            if (response?.Success == true && response.Data != null)
            {
                _progress = response.Data.ToDictionary(p => p.ContentId, p => p.Progress);
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine(ex);
        }
    }

    private void SelectContent(ContentDTO content)
    {
        _selectedContent = content;
    }

    private async Task HandleProgressUpdate(Guid contentId, float progress)
    {
        _progress[contentId] = progress;
        await Http.PostAsJsonAsync($"api/courses/{CourseId}/progress", new UpdateProgressDTO
        {
            ContentId = contentId,
            Progress = progress
        });
    }

    private void ToggleSidebar()
    {
        _sidebarOpen = !_sidebarOpen;
    }
}