@page "/reports"
@inject IReportingService ReportingService

<div class="min-h-screen bg-gray-100">
    <div class="py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
            <div class="flex justify-between items-center">
                <h1 class="text-2xl font-semibold text-gray-900">Reports</h1>
                <button @onclick="ShowScheduleDialog"
                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <Clock class="-ml-1 mr-2 h-5 w-5" />
                    Schedule Report
                </button>
            </div>

            <!-- Reports grid -->
            <div class="mt-8 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3">
                <div class="bg-white overflow-hidden shadow rounded-lg divide-y divide-gray-200">
                    <div class="p-6">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <BookOpen class="h-8 w-8 text-indigo-600" />
                            </div>
                            <div class="ml-4">
                                <h3 class="text-lg font-medium text-gray-900">Course Performance</h3>
                                <p class="mt-1 text-sm text-gray-500">
                                    Detailed analysis of course engagement, completion rates, and student performance.
                                </p>
                            </div>
                        </div>
                        <div class="mt-6">
                            <button @onclick="() => GenerateReport(ReportType.CoursePerformance)"
                                    class="w-full flex justify-center items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                Generate Report
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Add other report types here -->
            </div>

            <!-- Scheduled reports table -->
            <div class="mt-8">
                <h2 class="text-lg font-medium text-gray-900">Scheduled Reports</h2>
                <div class="mt-4 flex flex-col">
                    <div class="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                        <div class="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
                            <div class="shadow overflow-hidden border-b border-gray-200 sm:rounded-lg">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Report</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Frequency</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Generated</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Recipients</th>
                                            <th scope="col" class="relative px-6 py-3">
                                                <span class="sr-only">Actions</span>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (_scheduledReports != null)
                                        {
                                            @foreach (var report in _scheduledReports)
                                            {
                                                <tr>
                                                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@report.Name</td>
                                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@report.Frequency</td>
                                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                        <TimeAgo DateTime="@report.LastGenerated" />
                                                    </td>
                                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                        @report.Recipients.Count recipients
                                                    </td>
                                                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                        <button @onclick="() => EditSchedule(report)" class="text-indigo-600 hover:text-indigo-900 mr-4">Edit</button>
                                                        <button @onclick="() => DeleteSchedule(report)" class="text-red-600 hover:text-red-900">Delete</button>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Schedule Report Dialog -->
    @if (_showScheduleDialog)
    {
        <ScheduleReportDialog 
            Report="_selectedReport"
            OnSave="SaveSchedule"
            OnCancel="() => _showScheduleDialog = false" />
    }

    <!-- Report Generation Dialog -->
    @if (_showGenerateDialog)
    {
        <GenerateReportDialog 
            ReportType="_selectedReportType"
            OnGenerate="HandleGenerateReport"
            OnCancel="() => _showGenerateDialog = false" />
    }
</div>

@code {
    private List<ScheduledReportDTO>? _scheduledReports;
    private bool _showScheduleDialog;
    private bool _showGenerateDialog;
    private ScheduledReportDTO? _selectedReport;
    private ReportType _selectedReportType;

    protected override async Task OnInitializedAsync()
    {
        await LoadScheduledReports();
    }

    private async Task LoadScheduledReports()
    {
        try
        {
            _scheduledReports = await ReportingService.GetScheduledReportsAsync();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine(ex);
        }
    }

    private void ShowScheduleDialog()
    {
        _selectedReport = null;
        _showScheduleDialog = true;
    }

    private void EditSchedule(ScheduledReportDTO report)
    {
        _selectedReport = report;
        _showScheduleDialog = true;
    }

    private async Task DeleteSchedule(ScheduledReportDTO report)
    {
        try
        {
            await ReportingService.DeleteScheduledReportAsync(report.Id);
            await LoadScheduledReports();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine(ex);
        }
    }

    private async Task SaveSchedule(ScheduledReportDTO report)
    {
        try
        {
            await ReportingService.SaveScheduledReportAsync(report);
            _showScheduleDialog = false;
            await LoadScheduledReports();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine(ex);
        }
    }

    private void GenerateReport(ReportType type)
    {
        _selectedReportType = type;
        _showGenerateDialog = true;
    }

    private async Task HandleGenerateReport(ReportRequest request)
    {
        try
        {
            var reportBytes = await ReportingService.GenerateReportAsync(request);
            await JSRuntime.InvokeVoidAsync("downloadFile", request.FileName, "application/pdf", reportBytes);
            _showGenerateDialog = false;
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine(ex);
        }
    }
}