@using SaasLMS.Shared.DTOs

<div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

<div class="fixed inset-0 z-10 overflow-y-auto">
    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
        <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-2xl sm:p-6">
            <div>
                <div class="mt-3 sm:mt-5">
                    <h3 class="text-lg font-semibold leading-6 text-gray-900">
                        Grade Assignment
                    </h3>
                </div>

                @if (Assignment != null)
                {
                    <div class="mt-6">
                        <!-- Student Info -->
                        <div class="flex items-center">
                            @if (!string.IsNullOrEmpty(Assignment.StudentAvatar))
                            {
                                <img class="h-10 w-10 rounded-full" src="@Assignment.StudentAvatar" alt="" />
                            }
                            else
                            {
                                <div class="h-10 w-10 rounded-full bg-gray-100 flex items-center justify-center">
                                    <span class="text-sm font-medium text-gray-600">
                                        @Assignment.StudentName.First()
                                    </span>
                                </div>
                            }
                            <div class="ml-4">
                                <div class="font-medium text-gray-900">@Assignment.StudentName</div>
                                <div class="text-sm text-gray-500">@Assignment.CourseTitle</div>
                            </div>
                        </div>

                        <!-- Assignment Details -->
                        <div class="mt-6">
                            <h4 class="text-sm font-medium text-gray-900">Assignment</h4>
                            <p class="mt-1 text-sm text-gray-500">@Assignment.AssignmentTitle</p>
                            <p class="mt-2 text-sm text-gray-500">@Assignment.AssignmentDescription</p>
                        </div>

                        <!-- Submission -->
                        <div class="mt-6">
                            <h4 class="text-sm font-medium text-gray-900">Student Submission</h4>
                            <div class="mt-2 p-4 bg-gray-50 rounded-md">
                                <p class="text-sm text-gray-700 whitespace-pre-wrap">@Assignment.Content</p>
                            </div>
                            @if (!string.IsNullOrEmpty(Assignment.AttachmentUrl))
                            {
                                <div class="mt-4">
                                    <a href="@Assignment.AttachmentUrl" target="_blank"
                                       class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                        <Paperclip class="-ml-1 mr-2 h-5 w-5 text-gray-400" />
                                        View Attachment
                                    </a>
                                </div>
                            }
                        </div>

                        <!-- Grading Form -->
                        <div class="mt-6">
                            <EditForm Model="@_model" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator />

                                <div class="space-y-4">
                                    <!-- Score -->
                                    <div>
                                        <label for="score" class="block text-sm font-medium text-gray-700">Score</label>
                                        <div class="mt-1 relative rounded-md shadow-sm">
                                            <InputNumber @bind-Value="_model.Score" id="score"
                                                        class="block w-full rounded-md border-gray-300 pl-3 pr-12 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                                        min="0"
                                                        max="100" />
                                            <div class="absolute inset-y-0 right-0 flex items-center pr-3">
                                                <span class="text-gray-500 sm:text-sm">/ 100</span>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Feedback -->
                                    <div>
                                        <label for="feedback" class="block text-sm font-medium text-gray-700">Feedback</label>
                                        <div class="mt-1">
                                            <InputTextArea @bind-Value="_model.Feedback" id="feedback" rows="4"
                                                          class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" />
                                        </div>
                                    </div>
                                </div>

                                <!-- Actions -->
                                <div class="mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                                    <button type="submit"
                                            class="inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 sm:col-start-2">
                                        Submit Grade
                                    </button>
                                    <button type="button" @onclick="OnCancel"
                                            class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:col-start-1 sm:mt-0">
                                        Cancel
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public AssignmentSubmissionDTO? Assignment { get; set; }

    [Parameter]
    public EventCallback<GradingResultDTO> OnSave { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private GradingResultDTO _model = new();

    protected override void OnParametersSet()
    {
        if (Assignment != null)
        {
            _model = new GradingResultDTO
            {
                Score = Assignment.Score ?? 0,
                Feedback = Assignment.ReviewNotes ?? string.Empty
            };
        }
    }

    private async Task HandleValidSubmit()
    {
        await OnSave.InvokeAsync(_model);
    }
}