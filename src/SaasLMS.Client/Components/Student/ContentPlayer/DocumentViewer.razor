@using SaasLMS.Shared.DTOs

<div class="h-full flex flex-col bg-white overflow-hidden">
    <!-- Document Viewer -->
    <div class="flex-1 overflow-y-auto px-4 py-6 prose max-w-none" @onscroll="HandleScroll">
        @if (Content.Type == "PDF")
        {
            <iframe 
                src="@Content.DocumentUrl"
                class="w-full h-full border-0"
                frameborder="0">
            </iframe>
        }
        else
        {
            @((MarkupString)FormatContent())
        }
    </div>

    <!-- Progress Bar -->
    <div class="border-t border-gray-200 bg-white p-4">
        <div class="flex items-center">
            <div class="flex-1">
                <div class="bg-gray-200 rounded-full h-2">
                    <div 
                        class="bg-indigo-600 h-2 rounded-full transition-all duration-300"
                        style="width: @(_progress)%">
                    </div>
                </div>
            </div>
            <span class="ml-2 text-sm text-gray-500">@_progress%</span>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public ContentDTO Content { get; set; } = default!;

    [Parameter]
    public EventCallback<float> OnProgressUpdate { get; set; }

    private float _progress;
    private bool _hasReachedBottom;

    protected override void OnInitialized()
    {
        // Start with some progress for opening the document
        _progress = 10;
        OnProgressUpdate.InvokeAsync(_progress);
    }

    private string FormatContent()
    {
        // Convert markdown to HTML if needed
        return Content.TextContent;
    }

    private async Task HandleScroll(EventArgs args)
    {
        var element = args.GetType().GetProperty("Target")?.GetValue(args) as HTMLElement;
        if (element != null)
        {
            var scrollPercentage = (element.scrollTop + element.clientHeight) / element.scrollHeight * 100;
            
            if (scrollPercentage > _progress)
            {
                _progress = Math.Min(100, scrollPercentage);
                await OnProgressUpdate.InvokeAsync(_progress);
            }

            if (scrollPercentage >= 90 && !_hasReachedBottom)
            {
                _hasReachedBottom = true;
                _progress = 100;
                await OnProgressUpdate.InvokeAsync(_progress);
            }
        }
    }
}