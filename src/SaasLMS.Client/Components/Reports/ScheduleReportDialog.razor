@using SaasLMS.Shared.DTOs
@using SaasLMS.Shared.Models

<div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

<div class="fixed inset-0 z-10 overflow-y-auto">
    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
        <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
            <EditForm Model="@_model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />

                <div class="space-y-4">
                    <!-- Report Type -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Report Type</label>
                        <InputSelect @bind-Value="_model.Type" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                            @foreach (var type in Enum.GetValues(typeof(ReportType)))
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                    </div>

                    <!-- Frequency -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Frequency</label>
                        <InputSelect @bind-Value="_model.Frequency" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                            @foreach (var frequency in Enum.GetValues(typeof(ReportFrequency)))
                            {
                                <option value="@frequency">@frequency</option>
                            }
                        </InputSelect>
                    </div>

                    <!-- Recipients -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Recipients</label>
                        <div class="mt-1">
                            <div class="flex gap-2">
                                <InputText @bind-Value="_newRecipient"
                                          placeholder="Enter email address"
                                          class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" />
                                <button type="button" @onclick="AddRecipient"
                                        class="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">
                                    Add
                                </button>
                            </div>
                            <div class="mt-2 flex flex-wrap gap-2">
                                @foreach (var recipient in _model.Recipients)
                                {
                                    <div class="inline-flex items-center px-2.5 py-0.5 rounded-full text-sm font-medium bg-indigo-100 text-indigo-800">
                                        @recipient
                                        <button type="button" @onclick="() => RemoveRecipient(recipient)" class="ml-1.5 inline-flex items-center justify-center h-4 w-4 rounded-full text-indigo-400 hover:text-indigo-600">
                                            <span class="sr-only">Remove</span>
                                            <X class="h-3 w-3" />
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Format -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Format</label>
                        <InputSelect @bind-Value="_model.Format" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                            @foreach (var format in Enum.GetValues(typeof(ReportFormat)))
                            {
                                <option value="@format">@format</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                <div class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                    <button type="submit"
                            class="inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 sm:col-start-2">
                        @(Report == null ? "Schedule Report" : "Update Schedule")
                    </button>
                    <button type="button"
                            @onclick="OnCancel"
                            class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:col-start-1 sm:mt-0">
                        Cancel
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ScheduledReportDTO? Report { get; set; }

    [Parameter]
    public EventCallback<ScheduledReportDTO> OnSave { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private ScheduledReportDTO _model = new();
    private string _newRecipient = string.Empty;

    protected override void OnParametersSet()
    {
        if (Report != null)
        {
            _model = new ScheduledReportDTO
            {
                Id = Report.Id,
                Type = Report.Type,
                Frequency = Report.Frequency,
                Recipients = new List<string>(Report.Recipients),
                Format = Report.Format
            };
        }
    }

    private void AddRecipient()
    {
        if (!string.IsNullOrWhiteSpace(_newRecipient) && 
            IsValidEmail(_newRecipient) && 
            !_model.Recipients.Contains(_newRecipient))
        {
            _model.Recipients.Add(_newRecipient);
            _newRecipient = string.Empty;
        }
    }

    private void RemoveRecipient(string recipient)
    {
        _model.Recipients.Remove(recipient);
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (_model.Recipients.Count == 0)
        {
            // Show validation error
            return;
        }

        await OnSave.InvokeAsync(_model);
    }
}