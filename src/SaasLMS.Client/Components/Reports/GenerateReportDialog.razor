@using SaasLMS.Shared.Models

<div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

<div class="fixed inset-0 z-10 overflow-y-auto">
    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
        <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
            <div class="mt-3 text-center sm:mt-5">
                <h3 class="text-lg font-semibold leading-6 text-gray-900">
                    Generate @ReportType.ToString() Report
                </h3>
            </div>

            <EditForm Model="@_model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />

                <div class="mt-6 space-y-4">
                    <!-- Date Range -->
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">From</label>
                            <InputDate @bind-Value="_model.StartDate" 
                                      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">To</label>
                            <InputDate @bind-Value="_model.EndDate" 
                                      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" />
                        </div>
                    </div>

                    <!-- Report Options -->
                    @switch (ReportType)
                    {
                        case ReportType.CoursePerformance:
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Select Course</label>
                                <InputSelect @bind-Value="_model.CourseId"
                                            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                                    <option value="">All Courses</option>
                                    @if (_courses != null)
                                    {
                                        @foreach (var course in _courses)
                                        {
                                            <option value="@course.Id">@course.Title</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            break;

                        case ReportType.StudentProgress:
                            <div class="space-y-2">
                                <div class="flex items-center">
                                    <InputCheckbox @bind-Value="_model.IncludeModuleProgress" 
                                                  id="module-progress"
                                                  class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500" />
                                    <label for="module-progress" class="ml-2 text-sm text-gray-700">Include Module Progress</label>
                                </div>
                                <div class="flex items-center">
                                    <InputCheckbox @bind-Value="_model.IncludeAssessments" 
                                                  id="assessments"
                                                  class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500" />
                                    <label for="assessments" class="ml-2 text-sm text-gray-700">Include Assessment Results</label>
                                </div>
                                <div class="flex items-center">
                                    <InputCheckbox @bind-Value="_model.IncludeTimeSpent" 
                                                  id="time-spent"
                                                  class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500" />
                                    <label for="time-spent" class="ml-2 text-sm text-gray-700">Include Time Spent Analysis</label>
                                </div>
                            </div>
                            break;
                    }

                    <!-- Report Format -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Format</label>
                        <InputSelect @bind-Value="_model.Format"
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                            <option value="PDF">PDF</option>
                            <option value="Excel">Excel</option>
                            <option value="CSV">CSV</option>
                        </InputSelect>
                    </div>
                </div>

                <div class="mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                    <button type="submit"
                            class="inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-600">
                        Generate Report
                    </button>
                    <button type="button" @onclick="OnCancel"
                            class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0">
                        Cancel
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public ReportType ReportType { get; set; }

    [Parameter]
    public EventCallback<ReportRequest> OnGenerate { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private ReportRequest _model = new();
    private List<CourseDTO>? _courses;

    protected override async Task OnInitializedAsync()
    {
        // Set default date range to last 30 days
        _model.EndDate = DateTime.Today;
        _model.StartDate = _model.EndDate.AddDays(-30);

        // Load courses if needed
        if (ReportType == ReportType.CoursePerformance)
        {
            await LoadCoursesAsync();
        }
    }

    private async Task LoadCoursesAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ResponseDTO<List<CourseDTO>>>("api/courses?published=true");
            if (response?.Success == true)
            {
                _courses = response.Data;
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine(ex);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (_model.EndDate < _model.StartDate)
        {
            // Show validation error
            return;
        }

        _model.Type = ReportType;
        await OnGenerate.InvokeAsync(_model);
    }
}