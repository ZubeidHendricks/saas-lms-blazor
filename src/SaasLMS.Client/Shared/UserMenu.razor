@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<div class="relative ml-3">
    <div>
        <button @onclick="ToggleMenu" type="button" class="flex rounded-full bg-white text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
            <span class="sr-only">Open user menu</span>
            <img class="h-8 w-8 rounded-full" src="@ProfileImage" alt="@UserName">
        </button>
    </div>

    @if (_showMenu)
    {
        <div class="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
            <div class="px-4 py-2 text-sm text-gray-700">
                @UserName
            </div>
            <div class="border-t border-gray-100"></div>
            <a href="profile" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Your Profile</a>
            <a href="settings" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Settings</a>
            <button @onclick="SignOut" class="block w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100">Sign out</button>
        </div>
    }
</div>

@code {
    private bool _showMenu;
    private string? UserName;
    private string ProfileImage = "/default-avatar.png";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            UserName = user.FindFirst(ClaimTypes.Name)?.Value ?? "User";
        }
    }

    private void ToggleMenu()
    {
        _showMenu = !_showMenu;
    }

    private async Task SignOut()
    {
        // Handle sign out logic
        Navigation.NavigateTo("authentication/logout");
    }
}