@using SaasLMS.Core.Communication
@inject INotificationService NotificationService
@implements IAsyncDisposable

<div class="notification-center">
    <div class="notification-header">
        <h3>Notifications</h3>
        <div class="header-actions">
            <button class="btn btn-link" @onclick="MarkAllAsRead">
                Mark all as read
            </button>
        </div>
    </div>

    <div class="notification-list">
        @if (_notifications == null)
        {
            <LoadingSpinner />
        }
        else if (!_notifications.Any())
        {
            <div class="no-notifications">
                <p>No notifications</p>
            </div>
        }
        else
        {
            @foreach (var notification in _notifications)
            {
                <div class="notification-item @(notification.ReadAt.HasValue ? "" : "unread")">
                    <div class="notification-content" @onclick="() => HandleNotification(notification)">
                        <div class="notification-icon">
                            @switch (notification.Type)
                            {
                                case NotificationType.CourseAnnouncement:
                                    <i class="bi bi-megaphone"></i>
                                    break;
                                case NotificationType.Assignment:
                                    <i class="bi bi-journal-text"></i>
                                    break;
                                case NotificationType.GradingComplete:
                                    <i class="bi bi-check-circle"></i>
                                    break;
                                case NotificationType.SystemMessage:
                                    <i class="bi bi-gear"></i>
                                    break;
                                default:
                                    <i class="bi bi-bell"></i>
                                    break;
                            }
                        </div>
                        <div class="notification-details">
                            <h4>@notification.Title</h4>
                            <p>@notification.Message</p>
                            <span class="notification-time">
                                @FormatTimeAgo(notification.CreatedAt)
                            </span>
                        </div>
                    </div>
                    <button class="btn btn-link btn-sm" 
                            @onclick="() => DeleteNotification(notification.Id)">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            }

            @if (_hasMore)
            {
                <div class="load-more">
                    <button class="btn btn-link" @onclick="LoadMore">
                        Load More
                    </button>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<Notification> _notifications;
    private bool _hasMore;
    private HubConnection _hubConnection;
    private int _page = 1;
    private const int PageSize = 20;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotifications();
        await SetupSignalRConnection();
    }

    private async Task SetupSignalRConnection()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("/notificationHub")
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<Notification>("ReceiveNotification", notification =>
        {
            _notifications.Insert(0, notification);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task LoadNotifications()
    {
        var userId = await GetCurrentUserId();
        var notifications = await NotificationService.GetNotificationsAsync(userId);
        
        if (_page == 1)
        {
            _notifications = notifications;
        }
        else
        {
            _notifications.AddRange(notifications);
        }

        _hasMore = notifications.Count >= PageSize;
    }

    private async Task LoadMore()
    {
        _page++;
        await LoadNotifications();
    }

    private async Task MarkAllAsRead()
    {
        var unreadNotifications = _notifications
            .Where(n => !n.ReadAt.HasValue)
            .ToList();

        foreach (var notification in unreadNotifications)
        {
            await NotificationService.MarkAsReadAsync(notification.Id);
            notification.ReadAt = DateTime.UtcNow;
        }
    }

    private async Task HandleNotification(Notification notification)
    {
        if (!notification.ReadAt.HasValue)
        {
            await NotificationService.MarkAsReadAsync(notification.Id);
            notification.ReadAt = DateTime.UtcNow;
        }

        if (!string.IsNullOrEmpty(notification.ActionUrl))
        {
            NavigationManager.NavigateTo(notification.ActionUrl);
        }
    }

    private async Task DeleteNotification(Guid id)
    {
        await NotificationService.DeleteNotificationAsync(id);
        _notifications.RemoveAll(n => n.Id == id);
    }

    private string FormatTimeAgo(DateTime dateTime)
    {
        var span = DateTime.UtcNow - dateTime;

        if (span.TotalMinutes < 2) return "just now";
        if (span.TotalMinutes < 60) return $"{span.Minutes}m ago";
        if (span.TotalHours < 24) return $"{span.Hours}h ago";
        if (span.TotalDays < 7) return $"{span.Days}d ago";
        return dateTime.ToString("MMM dd");
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}