@using SaasLMS.Core.Courses
@using SaasLMS.Core.Learning
@inject ICourseService CourseService
@inject IProgressService ProgressService

<div class="course-view">
    <div class="course-header">
        <div class="course-info">
            <h1>@_course.Title</h1>
            <div class="course-meta">
                <span class="instructor">By @_course.InstructorName</span>
                <span class="progress">@_progress.CompletionPercentage%</span>
            </div>
        </div>

        <div class="course-actions">
            @if (!_course.IsCompleted)
            {
                <button class="btn btn-primary" @onclick="ContinueLearning">
                    Continue Learning
                </button>
            }
            else
            {
                <button class="btn btn-success" @onclick="ViewCertificate">
                    View Certificate
                </button>
            }
            <button class="btn btn-outline-primary" @onclick="DownloadMaterials">
                Download Materials
            </button>
        </div>
    </div>

    <div class="course-content">
        <div class="modules-list">
            @foreach (var module in _course.Modules.OrderBy(m => m.Order))
            {
                <div class="module-card @(IsModuleAccessible(module) ? "" : "locked")">
                    <div class="module-header">
                        <h3>@module.Title</h3>
                        <div class="module-status">
                            @if (IsModuleCompleted(module))
                            {
                                <i class="bi bi-check-circle-fill text-success"></i>
                            }
                            else if (IsModuleInProgress(module))
                            {
                                <i class="bi bi-play-circle-fill text-primary"></i>
                            }
                            else if (!IsModuleAccessible(module))
                            {
                                <i class="bi bi-lock-fill text-muted"></i>
                            }
                        </div>
                    </div>

                    <div class="module-content">
                        <p>@module.Description</p>
                        <div class="content-items">
                            @foreach (var content in module.Contents.OrderBy(c => c.Order))
                            {
                                <div class="content-item @(IsContentCompleted(content) ? "completed" : "")">
                                    <i class="bi @GetContentIcon(content.Type)"></i>
                                    <span>@content.Title</span>
                                    @if (IsContentCompleted(content))
                                    {
                                        <i class="bi bi-check text-success"></i>
                                    }
                                </div>
                            }
                        </div>
                    </div>

                    <div class="module-footer">
                        <span class="duration">
                            <i class="bi bi-clock"></i>
                            @FormatDuration(module.EstimatedDuration)
                        </span>
                        @if (IsModuleAccessible(module))
                        {
                            <button class="btn btn-primary btn-sm" 
                                    @onclick="() => StartModule(module)">
                                @(IsModuleInProgress(module) ? "Continue" : "Start")
                            </button>
                        }
                    </div>
                </div>
            }
        </div>

        <div class="course-sidebar">
            <div class="progress-card">
                <h3>Your Progress</h3>
                <div class="progress-bar">
                    <div class="progress-fill" 
                         style="width: @(_progress.CompletionPercentage)%">
                    </div>
                </div>
                <div class="progress-stats">
                    <div class="stat-item">
                        <span class="label">Completed</span>
                        <span class="value">@_progress.CompletedModules / @_course.Modules.Count</span>
                    </div>
                    <div class="stat-item">
                        <span class="label">Time Spent</span>
                        <span class="value">@FormatTimeSpent(_progress.TimeSpent)</span>
                    </div>
                </div>
            </div>

            <div class="resources-card">
                <h3>Course Resources</h3>
                <div class="resources-list">
                    @foreach (var resource in _course.Resources)
                    {
                        <a href="@resource.Url" 
                           target="_blank" 
                           class="resource-link">
                            <i class="bi @GetResourceIcon(resource.Type)"></i>
                            <span>@resource.Title</span>
                        </a>
                    }
                </div>
            </div>

            @if (_course.EnableDiscussions)
            {
                <div class="discussions-card">
                    <h3>Course Discussions</h3>
                    <CourseDiscussions CourseId="@_course.Id" />
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid CourseId { get; set; }

    private Course _course;
    private StudentProgress _progress;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourse();
        await LoadProgress();
    }

    private async Task LoadCourse()
    {
        _course = await CourseService.GetCourseAsync(CourseId);
    }

    private async Task LoadProgress()
    {
        _progress = await ProgressService.GetProgressAsync(
            await GetCurrentUserId(), 
            CourseId);
    }

    private bool IsModuleAccessible(Module module)
    {
        if (!module.Prerequisites?.Any() == true)
            return true;

        return module.Prerequisites.All(prereqId =>
            _progress.CompletedModules.Contains(prereqId));
    }

    private bool IsModuleCompleted(Module module)
    {
        return _progress.CompletedModules.Contains(module.Id);
    }

    private bool IsModuleInProgress(Module module)
    {
        return _progress.CurrentModuleId == module.Id;
    }

    private bool IsContentCompleted(Content content)
    {
        return _progress.CompletedContent.Contains(content.Id);
    }

    private async Task StartModule(Module module)
    {
        NavigationManager.NavigateTo($"/course/{CourseId}/module/{module.Id}");
    }

    private async Task ContinueLearning()
    {
        var currentModule = _course.Modules
            .FirstOrDefault(m => m.Id == _progress.CurrentModuleId);

        if (currentModule == null)
        {
            currentModule = _course.Modules
                .OrderBy(m => m.Order)
                .FirstOrDefault(m => IsModuleAccessible(m));
        }

        if (currentModule != null)
        {
            await StartModule(currentModule);
        }
    }

    private string GetContentIcon(ContentType type) => type switch
    {
        ContentType.Video => "bi-play-circle",
        ContentType.Document => "bi-file-text",
        ContentType.Quiz => "bi-question-circle",
        ContentType.Assignment => "bi-pencil-square",
        _ => "bi-file"
    };

    private string GetResourceIcon(ResourceType type) => type switch
    {
        ResourceType.PDF => "bi-file-pdf",
        ResourceType.Document => "bi-file-word",
        ResourceType.Spreadsheet => "bi-file-excel",
        ResourceType.Link => "bi-link",
        _ => "bi-file"
    };

    private string FormatDuration(TimeSpan duration)
    {
        if (duration.TotalHours >= 1)
            return $"{Math.Ceiling(duration.TotalHours)}h";
        return $"{duration.Minutes}m";
    }

    private string FormatTimeSpent(TimeSpan timeSpent)
    {
        if (timeSpent.TotalHours < 1)
            return $"{timeSpent.Minutes}m";
        if (timeSpent.TotalDays < 1)
            return $"{Math.Floor(timeSpent.TotalHours)}h {timeSpent.Minutes}m";
        return $"{Math.Floor(timeSpent.TotalDays)}d {timeSpent.Hours}h";
    }
}